---

- name: Install nginx
  ansible.builtin.include_role:
    name: nginxinc.nginx

- name: Configure nginx
  ansible.builtin.include_role:
    name: nginxinc.nginx_config
  vars:
    nginx_config_cleanup: true
    nginx_config_cleanup_files:
      - /etc/nginx/conf.d/default.conf
    nginx_config_http_template_enable: true
    nginx_config_http_template:
      default:
        template_file: http/default.conf.j2
        conf_file_name: webui.conf
        conf_file_location: /etc/nginx/conf.d/
        servers:
          server1:
            listen:
              listen_localhost:
                port: 80
                opts:
                  - default_server
            root: "{{ webui_dir }}"
            server_name: localhost
            error_page: "{{ webui_dir }}"
            web_server:
              locations:
                default:
                  location: /
                  try_files: $uri @proxy_to_app
              http_demo_conf: false
            reverse_proxy:
              locations:
                backend:
                  location: "@proxy_to_app"
                  proxy_set_header:
                    header_x_forwarded_for:
                      name: X-Forwarded-For
                      value: $proxy_add_x_forwarded_for
                    header_x_forwarded_proto:
                      name: X-Forwarded-Proto
                      value: $scheme
                    header_host:
                      name: Host
                      value: $http_host
                  proxy_redirect: "off"
                  proxy_pass: http://app_server
        upstreams:
          app_server:
            name: app_server
            sticky_cookie: false
            custom_options:
              - server unix:/run/gunicorn.sock fail_timeout=0;
            servers: []
            # Should be able to replace custom_options with servers below
            # See https://github.com/nginxinc/ansible-role-nginx/issues/232
            # This still breaks. Wait until 0.4 of https://github.com/nginxinc/ansible-role-nginx-config
            # servers:
            #   gunicorn:
            #     address: unix:/run/gunicorn.sock
            #     health_check: fail_timeout=0

- name: Install dependencies
  ansible.builtin.package:
    name:
      - python38
      - python38-devel
      - gcc

- name: Install gunicorn
  ansible.builtin.pip:
    name:
      - gunicorn
    virtualenv: /opt/webui_venv
    virtualenv_command: /usr/bin/python3.8 -m venv
  register: webui_venv

- name: Create webui group
  ansible.builtin.group:
    name: webui

- name: Create the webui user
  ansible.builtin.user:
    name: webui
    group: webui
    groups:
      - usermgmt

- name: Ensure git is installed
  ansible.builtin.package:
    name: git

- name: Checkout webui
  ansible.builtin.git:
    repo: https://github.com/clusterinthecloud/webui.git
    force: true
    dest: "{{ webui_dir }}"
    version: master
  notify: Reload gunicorn
  tags:
    - molecule-idempotence-notest  # The checkout get changed by the next tasks

- name: Set django to production mode
  ansible.builtin.lineinfile:
    path: "{{ webui_dir }}/webui/settings.py"
    regexp: '^IN_PRODUCTION = '
    line: IN_PRODUCTION = True
  tags:
    - molecule-idempotence-notest  # The file has been reset by the checkout

- name: Set secret key
  ansible.builtin.lineinfile:
    path: "{{ webui_dir }}/webui/settings.py"
    regexp: '^SECRET_KEY'
    line: SECRET_KEY = r"{{ lookup('password', webui_password_store_directory + '/webuisecretkeyfile chars=ascii_letters,digits length=50') }}"
  tags:
    - molecule-idempotence-notest  # The file has been reset by the checkout

- name: Install webui dependencies
  ansible.builtin.pip:
    requirements: "{{ webui_dir }}/requirements.txt"
    virtualenv: "{{ webui_venv.virtualenv }}"

- name: Collect static files
  ansible.builtin.command:
    cmd: "{{ webui_venv.virtualenv }}/bin/python manage.py collectstatic --no-input"
    chdir: "{{ webui_dir }}"
  register: collectstatic_result
  changed_when: '"0 static files copied to" not in collectstatic_result.stdout'

# TODO move this (and other copies of it) to a central role
- name: Create citc config dir
  ansible.builtin.file:
    path: /etc/citc
    state: directory
    mode: "0755"

- name: Create webui mysql config
  ansible.builtin.template:
    src: my.cnf.j2
    dest: /etc/citc/webui.my.cnf
    owner: webui
    group: webui
    mode: "660"

- name: Create webui database
  community.mysql.mysql_db:
    name: webui
    state: present

- name: Create webui MySQL user
  community.mysql.mysql_user:
    name: webui
    password: "{{ webui_database_password }}"
    priv: 'webui.*:ALL'
    state: present

- name: Run migrations
  ansible.builtin.command:
    cmd: "{{ webui_venv.virtualenv }}/bin/python manage.py migrate --no-input"
    chdir: "{{ webui_dir }}"
  register: migrate_result
  changed_when: '"No migrations to apply" not in migrate_result.stdout'

- name: Create django admin
  ansible.builtin.command:
    cmd: "{{ webui_venv.virtualenv }}/bin/python manage.py createsuperuser --username citc --email citc@localhost"
    chdir: "{{ webui_dir }}"
  environment:
    DJANGO_SUPERUSER_PASSWORD: "{{ webui_superuser_password }}"
  no_log: true
  register: createsuperuser_result
  changed_when: '"Creating user" in createsuperuser_result.stdout'

- name: Add webui password to secrets
  ansible.builtin.lineinfile:
    path: /usr/sbin/get_secrets
    line: echo webui "{{ webui_superuser_password }}"

- name: Create webui config file
  ansible.builtin.template:
    src: webui.yaml.j2
    dest: /etc/citc/webui.yaml
    owner: webui
    group: webui
    mode: "660"

# TODO make checkout readable only by correct user

- name: Install gunicorn service file
  ansible.builtin.copy:
    src: gunicorn.service
    dest: /etc/systemd/system/gunicorn.service
    mode: u=rw,g=r,o=

- name: Install gunicorn socket file
  ansible.builtin.copy:
    src: gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket
    mode: u=rw,g=r,o=

- name: Start and enable gunicorn
  ansible.builtin.systemd:
    name: gunicorn
    state: started
    enabled: true
    daemon_reexec: true

- name: Install firewalld
  ansible.builtin.package:
    name: firewalld
    state: present

- name: Install python-firewall
  ansible.builtin.package:
    name: python3-firewall
    state: present

- name: Open HTTP port in firewall
  ansible.posix.firewalld:
    service: http
    permanent: true
    state: enabled
  notify: Restart firewalld
